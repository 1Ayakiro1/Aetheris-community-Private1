"""
ДОКУМЕНТАЦИЯ АРХИТЕКТУРЫ ПРОЕКТА AETHERIS COMMUNITY
==================================================

Автор: Ayakiro
Версия: 1.0
Дата создания: 18.09.2025

Этот документ описывает архитектуру веб-приложения Aetheris Community,
структуру проекта, используемые технологии и взаимодействие компонентов.

ОБЗОР ПРОЕКТА
============

Aetheris Community - это веб-приложение для сообщества, построенное на:
- Frontend: Vue.js 3 + TypeScript + Vite
- UI Framework: PrimeVue + PrimeIcons
- Стилизация: SCSS с системой CSS переменных
- Роутинг: Vue Router 4
- Backend: Python (файлы пока пустые, архитектура готова)

СТРУКТУРА ПРОЕКТА
=================

/
├── backend/                    # Серверная часть (Python)
│   ├── main.py                # Главный файл приложения
│   ├── models.py              # Модели данных  
│   └── database.py            # Работа с базой данных
│
├── frontend/                   # Клиентская часть
│   ├── src/
│   │   ├── App.vue            # Корневой компонент
│   │   ├── main.ts            # Точка входа приложения
│   │   │
│   │   ├── assets/            # Статические ресурсы
│   │   │   ├── icons/         # Vue компоненты иконок
│   │   │   ├── imgs/          # Изображения (PNG, SVG)
│   │   │   ├── svgs/          # SVG файлы
│   │   │   └── main.scss      # Основные стили
│   │   │
│   │   ├── components/        # Переиспользуемые компоненты
│   │   │   ├── AppHeader.vue  # Шапка сайта
│   │   │   ├── AppFooter.vue  # Подвал сайта
│   │   │   ├── ArticleCard.vue# Карточка статьи
│   │   │   ├── ThemeSwitcher.vue # Переключатель тем
│   │   │   └── ...            # Другие компоненты
│   │   │
│   │   ├── composables/       # Композиционные функции
│   │   │   ├── useArticles.ts # Работа со статьями + API
│   │   │   ├── useAuth.ts     # Аутентификация + API
│   │   │   ├── useTheme.ts    # Управление темами
│   │   │   ├── useValidation.ts # Валидация форм
│   │   │   └── useI18n.ts     # Интернационализация
│   │   │
│   │   ├── services/          # API сервисы
│   │   │   └── api.ts         # Центральный API клиент
│   │   │
│   │   ├── router/            # Настройка маршрутизации
│   │   │   └── index.ts       # Конфигурация роутов
│   │   │
│   │   ├── types/             # TypeScript типы
│   │   │   ├── article.ts     # Типы для статей
│   │   │   └── user.ts        # Типы для пользователей
│   │   │
│   │   └── views/             # Страницы приложения
│   │       ├── Home.vue       # Главная страница
│   │       ├── Articles.vue   # Список статей + API
│   │       ├── Login.vue      # Авторизация + API
│   │       ├── SignIn.vue     # Регистрация + API
│   │       ├── CreateArticle.vue # Создание статей + API
│   │       ├── Profile.vue    # Профиль пользователя
│   │       └── ...            # Другие страницы
│   │
│   ├── Documentation/         # Техническая документация
│   │   ├── Arch.py           # Этот файл
│   │   ├── Registration.py   # Документация регистрации
│   │   └── Articles.py       # Документация статей
│   │
│   └── examples/             # HTML примеры страниц
│       ├── home_page.html    # Статические версии
│       ├── login_page.html   # для референса
│       └── ...
│
├── package.json              # Зависимости Node.js
├── vite.config.ts           # Конфигурация Vite
├── tsconfig.json            # Конфигурация TypeScript
└── README.md                # Основная документация

ТЕХНОЛОГИЧЕСКИЙ СТЕК
===================

Frontend Dependencies:
- vue: ^3.5.20                # Основной фреймворк
- vue-router: ^4.5.1          # Маршрутизация
- typescript: ^5.9.2         # Типизация
- vite: ^7.1.3                # Сборщик и dev-server
- primevue: ^4.3.7            # UI библиотека
- primeicons: ^7.0.0          # Набор иконок
- @primeuix/themes: ^1.2.3    # Темы для PrimeVue
- quill: ^2.0.3               # Rich text editor
- alova: ^3.3.4               # HTTP клиент для API
- pinia: ^3.0.3               # Управление состоянием
- scss: ^0.2.4                # CSS препроцессор

Dev Dependencies:
- @vitejs/plugin-vue: ^6.0.1  # Vue plugin для Vite
- vite-svg-loader: ^5.1.0     # Загрузка SVG как компонентов
- eslint: ^9.34.0             # Линтер
- prettier: ^3.6.2           # Форматтер кода
- sass-embedded: ^1.91.0      # SASS компилятор

АРХИТЕКТУРА КОМПОНЕНТОВ
======================

1. КОРНЕВАЯ СТРУКТУРА
   App.vue - корневой компонент, содержит:
   - AppHeader (шапка сайта)
   - router-view (область для страниц)
   - AppFooter (подвал сайта)

2. СИСТЕМА МАРШРУТИЗАЦИИ
   Определена в /router/index.ts:
   
   Основные разделы:
   - / - Главная страница (Home.vue)
   - /articles/* - Статьи и их подразделы
   - /faq/* - FAQ и справочная информация  
   - /legal/* - Юридические документы
   - /settings/* - Настройки пользователя
   - /login, /signin - Авторизация и регистрация
   - /profile - Профиль пользователя
   - /notifications - Уведомления
   - /shop - Магазин
   - /analytics - Аналитика
   - /balance - Баланс пользователя

3. СИСТЕМА ТЕМ
   Реализована через CSS переменные:
   - Поддержка 4 тем: system, white, aquamarine, night-dark
   - Автоматическое определение системной темы
   - Сохранение в cookies
   - Инициализация в main.ts перед созданием Vue app

4. КОМПОЗИЦИОННЫЕ ФУНКЦИИ (Composables)
   
   useArticles.ts - управление статьями:
   - Загрузка статей через API
   - CRUD операции (создание, обновление, удаление)
   - Лайки и закладки
   - Фильтрация и поиск
   - Пагинация и бесконечная прокрутка
   - Fallback на моковые данные в dev режиме
   
   useAuth.ts - аутентификация:
   - Регистрация и вход пользователей
   - Управление JWT токенами
   - Автоматическое обновление токенов
   - Проверка ролей и прав доступа
   - Защита роутов
   
   useValidation.ts - валидация форм:
   - Валидация nickname, email, password
   - Санитизация входных данных
   - Возврат структурированных ошибок
   
   useTheme.ts - управление темами:
   - Переключение тем
   - Сохранение настроек
   - Реакция на системные изменения
   
   useI18n.ts - интернационализация:
   - Мультиязычность (полностью реализована)

5. API СЕРВИСЫ
   Центральный API клиент в /services/api.ts:
   - HTTP клиент с автоматической обработкой ошибок
   - Автоматическое добавление JWT токенов
   - Специализированные API для разных разделов
   - Обработка timeout и сетевых ошибок
   - Загрузка файлов с прогрессом

6. ТИПИЗАЦИЯ
   Все TypeScript типы определены в /types/:
   - article.ts: типы для статей, авторов, API ответов
   - user.ts: типы для пользователей, аутентификации, профилей
   - Строгая типизация для всех компонентов
   - Интерфейсы для форм и валидации

СИСТЕМА СТИЛЕЙ
==============

1. CSS ПЕРЕМЕННЫЕ ПО ТЕМАМ
   Определены в main.scss, включают:
   - --bg-primary: основной фон
   - --bg-secondary: вторичный фон
   - --text-primary: основной текст
   - --text-secondary: вторичный текст
   - --btn-primary: цвет кнопок
   - --font-sans: основной шрифт

2. RESPONSIVE DESIGN
   - Адаптивная верстка для различных устройств
   - Использование CSS Grid и Flexbox
   - Максимальная ширина контейнера: 1920px

3. КОМПОНЕНТНАЯ СТИЛИЗАЦИЯ
   - Scoped стили в каждом Vue компоненте
   - SCSS для вложенности и переменных
   - Consistent UI patterns

ГОТОВНОСТЬ К BACKEND ИНТЕГРАЦИИ
===============================

РЕАЛИЗОВАННЫЕ КОМПОНЕНТЫ:
1. ✅ API клиент с полной обработкой ошибок
2. ✅ Система аутентификации (useAuth)
3. ✅ Управление статьями (useArticles) 
4. ✅ Типизация всех API запросов/ответов
5. ✅ Обработка состояний загрузки и ошибок
6. ✅ Fallback на моковые данные в dev режиме
7. ✅ Автоматическое обновление токенов
8. ✅ Защита роутов и проверка прав доступа

ИНТЕГРИРОВАННЫЕ СТРАНИЦЫ:
- ✅ Login.vue - полная интеграция с API
- ✅ SignIn.vue - полная интеграция с API  
- ✅ Articles.vue - загрузка через API
- ✅ CreateArticle.vue - создание через API
- 🔄 Profile.vue - требует доработки
- ❌ Остальные страницы - пока статичные

КОНФИГУРАЦИЯ:
- ✅ Переменные окружения (env.example)
- ✅ Настройка базового URL API
- ✅ Timeout и retry логика
- ✅ Обработка CORS

ВЗАИМОДЕЙСТВИЕ С BACKEND
========================

API СТРУКТУРА (готовая к использованию):

1. АУТЕНТИФИКАЦИЯ
   POST /api/auth/login
   POST /api/auth/register
   POST /api/auth/logout
   GET /api/auth/me

2. СТАТЬИ
   GET /api/articles - получить список статей
   GET /api/articles/:id - получить статью по ID
   POST /api/articles - создать статью
   PUT /api/articles/:id - обновить статью
   DELETE /api/articles/:id - удалить статью

3. ПОЛЬЗОВАТЕЛИ
   GET /api/users/:id - получить профиль
   PUT /api/users/:id - обновить профиль
   GET /api/users/:id/articles - статьи пользователя

4. КОММЕНТАРИИ
   GET /api/articles/:id/comments
   POST /api/articles/:id/comments
   PUT /api/comments/:id
   DELETE /api/comments/:id

WORKFLOW РАЗРАБОТКИ
==================

1. SETUP ОКРУЖЕНИЯ
   npm install                # Установка зависимостей
   npm run dev               # Запуск dev сервера (localhost:5173)
   npm run build             # Сборка для продакшена
   npm run preview           # Предпросмотр продакшен сборки
   npm run lint              # Проверка кода ESLint

2. СТРУКТУРА РАЗРАБОТКИ
   - Каждая страница - отдельный Vue компонент в /views/
   - Переиспользуемые элементы в /components/
   - Бизнес-логика в /composables/
   - Типы в /types/
   - Стили с scoped CSS

3. КОНВЕНЦИИ КОДА
   - TypeScript для всех файлов
   - Composition API для Vue компонентов
   - Именование файлов: PascalCase для компонентов
   - Папки: camelCase
   - CSS классы: kebab-case

БЕЗОПАСНОСТЬ
============

1. FRONTEND ВАЛИДАЦИЯ
   - Строгая валидация форм
   - Санитизация пользовательского ввода
   - Ограничения на длину полей
   - XSS защита через Vue.js

2. ПЛАНИРУЕМАЯ BACKEND БЕЗОПАСНОСТЬ
   - JWT токены для аутентификации
   - Хеширование паролей
   - Rate limiting
   - CORS настройки
   - SQL injection защита

PERFORMANCE ОПТИМИЗАЦИИ
======================

1. FRONTEND
   - Lazy loading для роутов (import())
   - Tree shaking через Vite
   - Компрессия статических ресурсов
   - Кеширование данных в composables
   - Виртуализация длинных списков (при необходимости)

2. BACKEND (планируется)
   - Кеширование запросов
   - Оптимизация SQL запросов
   - CDN для статики
   - Gzip компрессия

МОНИТОРИНГ И ДЕБАГ
=================

1. DEVELOPMENT
   - Vue DevTools для отладки компонентов
   - Browser DevTools для стилей и сети
   - ESLint для качества кода
   - TypeScript для ошибок типизации

2. PRODUCTION (планируется)
   - Error tracking (Sentry)
   - Performance monitoring
   - User analytics
   - Server logs

ПЛАНЫ РАЗВИТИЯ
==============

1. БЛИЖАЙШИЕ ЗАДАЧИ (готово к backend)
   ✅ Создание API клиента
   ✅ Интеграция аутентификации
   ✅ Интеграция управления статьями
   ✅ Обработка ошибок и состояний загрузки
   🔄 Реализация backend API (Python)
   🔄 Подключение реальной базы данных
   🔄 Тестирование интеграции

2. СРЕДНЕСРОЧНЫЕ ЗАДАЧИ
   - Интеграция остальных страниц с API
   - Система комментариев
   - Уведомления в реальном времени
   - Загрузка файлов и изображений
   - Система ролей и прав доступа

3. ДОЛГОСРОЧНЫЕ ПЛАНЫ
   - Мобильная версия/PWA
   - Advanced поиск и фильтрация
   - Реальное время (WebSocket)
   - SEO оптимизация
   - Аналитика и метрики

КОНТАКТЫ И ПОДДЕРЖКА
==================

Разработчик: Ayakiro
GitHub: github.com/1Ayakiro1/Aetheris-community-Private1

Для вопросов по архитектуре обращайтесь к этому документу.
Для изменений в архитектуре обновляйте этот файл.

==================================================
Конец документации архитектуры
==================================================
"""